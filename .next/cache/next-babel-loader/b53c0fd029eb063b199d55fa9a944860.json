{"ast":null,"code":"import { takeLatest, call, put } from 'redux-saga/effects';\nimport Actions, { Types } from './actions';\nimport * as snsAPI from '../../api/SNS';\nimport * as userAPI from '../../api/user';\nimport { setToken } from '../../utils/cookies';\nimport { showError } from '../exceptions';\nexport function* fbSignIn(payload) {\n  try {\n    const response = yield call(snsAPI.fbSignIn, payload);\n    const {\n      token\n    } = response || {};\n\n    if (!token) {\n      throw response;\n    }\n\n    yield put(Actions.fbSignInSuccess(response));\n    yield put(Actions.showAuthDrawer(false)); // TODO: Set token in cookies\n\n    setToken(token);\n  } catch (err) {\n    yield put(Actions.fbSignInFailure(err));\n    showError(err);\n  }\n}\nexport function* googleSignIn(payload) {\n  try {\n    const response = yield call(snsAPI.googleSignIn, payload);\n    const {\n      token\n    } = response || {};\n\n    if (!token) {\n      throw response;\n    }\n\n    yield put(Actions.googleSignInSuccess(response));\n    yield put(Actions.showAuthDrawer(false)); // TODO: Set token in cookies\n\n    setToken(token);\n  } catch (err) {\n    yield put(Actions.googleSignInFailure(err));\n    showError(err);\n  }\n}\nexport function* signIn(payload) {\n  try {\n    const response = yield call(snsAPI.signIn, payload);\n    const {\n      token\n    } = response || {};\n\n    if (!token) {\n      throw response;\n    }\n\n    yield put(Actions.signInSuccess(response));\n    yield put(Actions.showAuthDrawer(false)); // // TODO: Set token in cookies\n\n    setToken(token);\n    yield put(Actions.getAccountInfo());\n  } catch (err) {\n    yield put(Actions.signInFailure(err));\n    showError(err);\n  }\n}\nexport function* signUp(payload) {\n  try {\n    const response = yield call(snsAPI.signUp, payload);\n    const {\n      token\n    } = response || {};\n\n    if (!token) {\n      throw response;\n    }\n\n    yield put(Actions.signUpSuccess(response));\n    yield put(Actions.showAuthDrawer(false)); // TODO: Set token in cookies\n\n    setToken(token);\n  } catch (err) {\n    yield put(Actions.signUpFailure(err));\n    showError(err);\n  }\n}\nexport function* getAccountInfo(payload) {\n  try {\n    const response = yield call(userAPI.getAccountInfo, payload); // TODO: Set token in cookies\n\n    if (!response) {\n      throw response;\n    }\n\n    yield put(Actions.getAccountInfoSuccess(response));\n  } catch (err) {\n    yield put(Actions.getAccountInfoFailure(err));\n    showError(err);\n  }\n} // export function* updateUser(payload) { }\n\nexport default [takeLatest(Types.FB_SIGN_IN, fbSignIn), takeLatest(Types.GOOGLE_SIGN_IN, googleSignIn), takeLatest(Types.SIGN_IN, signIn), takeLatest(Types.SIGN_UP, signUp), takeLatest(Types.GET_ACCOUNT_INFO, getAccountInfo)];","map":null,"metadata":{},"sourceType":"module"}