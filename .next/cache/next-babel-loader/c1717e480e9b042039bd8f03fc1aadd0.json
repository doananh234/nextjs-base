{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport fetch from 'isomorphic-unfetch';\nimport { getToken } from '../utils/cookies';\n\nvar checkIfErrorOccurs = function checkIfErrorOccurs(res) {\n  return (// console.log('res', res);\n    {\n      code: res.status,\n      res: res\n    }\n  );\n};\n\nvar TIME_OUT = 30000;\n\nvar timeoutPromise = function timeoutPromise(ms, promise) {\n  return new _Promise(function (resolve, reject) {\n    var timeoutId = setTimeout(function () {\n      reject(new Error('Request time out! Please try again.'));\n    }, ms);\n    promise.then(function (res) {\n      clearTimeout(timeoutId);\n      resolve(res);\n    }, function (err) {\n      clearTimeout(timeoutId);\n      reject(err);\n    });\n  });\n};\n\nfunction xFetch(_x, _x2) {\n  return _xFetch.apply(this, arguments);\n}\n\nfunction _xFetch() {\n  _xFetch = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(path, headerOptions) {\n    var ops,\n        normalFetch,\n        res,\n        response,\n        _response,\n        err,\n        _err,\n        _err2,\n        _args2 = arguments;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            ops = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : {\n              noParse: false\n            };\n            normalFetch = fetch(path, headerOptions);\n\n            if (!ops.noParse) {\n              _context2.next = 4;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", timeoutPromise(TIME_OUT, normalFetch));\n\n          case 4:\n            _context2.next = 6;\n            return timeoutPromise(TIME_OUT, normalFetch.then(checkIfErrorOccurs));\n\n          case 6:\n            res = _context2.sent;\n\n            if (!(res.code < 300)) {\n              _context2.next = 14;\n              break;\n            }\n\n            if (!(res.code === 204)) {\n              _context2.next = 10;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", {\n              success: true\n            });\n\n          case 10:\n            _context2.next = 12;\n            return res.res.json();\n\n          case 12:\n            response = _context2.sent;\n            return _context2.abrupt(\"return\", response);\n\n          case 14:\n            _context2.prev = 14;\n            _context2.next = 17;\n            return res.res.json();\n\n          case 17:\n            _response = _context2.sent;\n            err = {\n              code: res.code,\n              message: _response.message\n            };\n            throw err;\n\n          case 22:\n            _context2.prev = 22;\n            _context2.t0 = _context2[\"catch\"](14);\n\n            if (!(res.code === 426)) {\n              _context2.next = 29;\n              break;\n            }\n\n            _err = {\n              code: res.code,\n              message: 'We have had some significant upgrades for the app. Please click below to upgrade your app!'\n            };\n            throw _err;\n\n          case 29:\n            _err2 = {\n              code: res.code,\n              message: _context2.t0.message ? _context2.t0.message : 'Something wrong. Please try again.'\n            };\n            throw _err2;\n\n          case 31:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[14, 22]]);\n  }));\n  return _xFetch.apply(this, arguments);\n}\n\nexport default xFetch;\n\nfunction getQueryString(params) {\n  var esc = encodeURIComponent;\n  return _Object$keys(params).map(function (k) {\n    return \"\".concat(esc(k), \"=\").concat(esc(params[k]));\n  }).join('&');\n}\n\nfunction requestWrapper(method) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(_url) {\n        var _data,\n            _params,\n            context,\n            url,\n            data,\n            params,\n            defaults,\n            token,\n            paramsObj,\n            _args = arguments;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _data = _args.length > 1 && _args[1] !== undefined ? _args[1] : null;\n                _params = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};\n                context = _args.length > 3 ? _args[3] : undefined;\n                url = _url;\n                data = _data;\n                params = _params;\n                url = process.env.API_URL + url;\n\n                if (method === 'GET') {\n                  // is it a GET?\n                  // GET doesn't have data\n                  params = data;\n\n                  if (params !== null) {\n                    url = \"\".concat(url, \"?\").concat(getQueryString(params));\n                  }\n\n                  data = null;\n                } else if (data === Object(data)) {\n                  // (data === Object(data)) === _.isObject(data)\n                  data = _JSON$stringify(data);\n                } // default params for fetch = method + (Content-Type)\n\n\n                defaults = {\n                  method: method,\n                  headers: {\n                    'Content-Type': 'application/json; charset=UTF-8'\n                  }\n                }; // TODO: No need context in case browser\n\n                token = getToken(context);\n\n                if (token) {\n                  defaults.headers.Authorization = \"\".concat(token);\n                }\n\n                if (data) {\n                  defaults.body = data;\n                }\n\n                paramsObj = _objectSpread({}, defaults, {\n                  headers: _objectSpread({}, params, defaults.headers)\n                });\n                return _context.abrupt(\"return\", xFetch(url, paramsObj));\n\n              case 14:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x3) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n}\n\nexport var get = requestWrapper('GET');\nexport var post = requestWrapper('POST');\nexport var put = requestWrapper('PUT');\nexport var patch = requestWrapper('PATCH');\nexport var del = requestWrapper('DELETE');","map":{"version":3,"sources":["/Users/apple/Work/myproject/base/base-nextjs/api/utils.js"],"names":["fetch","getToken","checkIfErrorOccurs","res","code","status","TIME_OUT","timeoutPromise","ms","promise","resolve","reject","timeoutId","setTimeout","Error","then","clearTimeout","err","xFetch","path","headerOptions","ops","noParse","normalFetch","success","json","response","message","getQueryString","params","esc","encodeURIComponent","map","k","join","requestWrapper","method","_url","_data","_params","context","url","data","process","env","API_URL","Object","defaults","headers","token","Authorization","body","paramsObj","get","post","put","patch","del"],"mappings":"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","sourcesContent":["import fetch from 'isomorphic-unfetch';\nimport { getToken } from '../utils/cookies';\n\nconst checkIfErrorOccurs = res =>\n  // console.log('res', res);\n  ({\n    code: res.status,\n    res,\n  });\nconst TIME_OUT = 30000;\n\nconst timeoutPromise = function timeoutPromise(ms, promise) {\n  return new Promise((resolve, reject) => {\n    const timeoutId = setTimeout(() => {\n      reject(new Error('Request time out! Please try again.'));\n    }, ms);\n    promise.then(\n      res => {\n        clearTimeout(timeoutId);\n        resolve(res);\n      },\n      err => {\n        clearTimeout(timeoutId);\n        reject(err);\n      }\n    );\n  });\n};\n\nasync function xFetch(path, headerOptions, ops = { noParse: false }) {\n  const normalFetch = fetch(path, headerOptions);\n  if (ops.noParse) {\n    return timeoutPromise(TIME_OUT, normalFetch);\n  }\n  const res = await timeoutPromise(\n    TIME_OUT,\n    normalFetch.then(checkIfErrorOccurs)\n  );\n\n  if (res.code < 300) {\n    if (res.code === 204) {\n      return { success: true };\n    }\n    const response = await res.res.json();\n    return response;\n  }\n  try {\n    const response = await res.res.json();\n    const err = {\n      code: res.code,\n      message: response.message,\n    };\n    throw err;\n  } catch (e) {\n    if (res.code === 426) {\n      const err = {\n        code: res.code,\n        message:\n          'We have had some significant upgrades for the app. Please click below to upgrade your app!',\n      };\n      throw err;\n    } else {\n      const err = {\n        code: res.code,\n        message: e.message ? e.message : 'Something wrong. Please try again.',\n      };\n      throw err;\n    }\n  }\n}\n\nexport default xFetch;\n\nfunction getQueryString(params) {\n  const esc = encodeURIComponent;\n  return Object.keys(params)\n    .map(k => `${esc(k)}=${esc(params[k])}`)\n    .join('&');\n}\n\nfunction requestWrapper(method) {\n  return async (_url, _data = null, _params = {}, context) => {\n    let url = _url;\n    let data = _data;\n    let params = _params;\n    url = process.env.API_URL + url;\n    if (method === 'GET') {\n      // is it a GET?\n      // GET doesn't have data\n      params = data;\n      if (params !== null) {\n        url = `${url}?${getQueryString(params)}`;\n      }\n      data = null;\n    } else if (data === Object(data)) {\n      // (data === Object(data)) === _.isObject(data)\n      data = JSON.stringify(data);\n    }\n\n    // default params for fetch = method + (Content-Type)\n    const defaults = {\n      method,\n      headers: {\n        'Content-Type': 'application/json; charset=UTF-8',\n      },\n    };\n\n    // TODO: No need context in case browser\n    const token = getToken(context);\n\n    if (token) {\n      defaults.headers.Authorization = `${token}`;\n    }\n\n    if (data) {\n      defaults.body = data;\n    }\n\n    const paramsObj = {\n      ...defaults,\n      headers: { ...params, ...defaults.headers },\n    };\n    return xFetch(url, paramsObj);\n  };\n}\n\nexport const get = requestWrapper('GET');\nexport const post = requestWrapper('POST');\nexport const put = requestWrapper('PUT');\nexport const patch = requestWrapper('PATCH');\nexport const del = requestWrapper('DELETE');\n"]},"metadata":{},"sourceType":"module"}