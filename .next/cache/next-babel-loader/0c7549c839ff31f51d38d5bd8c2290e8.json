{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport { makeConstantCreator, makeActionCreator } from '../../utils/redux'; // TODO: Model name\n// export const MODEL = 'todos';\n// TODO: Add actions you don't want to use here\n\nexport const IGNORE_ACTIONS = []; // TODO: Create constant types for model\n\nexport const Types = _objectSpread({}, makeConstantCreator('SIGN_IN', 'SIGN_IN_SUCCESS', 'SIGN_IN_FAILURE', 'SIGN_UP', 'SIGN_UP_SUCCESS', 'SIGN_UP_FAILURE', 'GOOGLE_SIGN_IN', 'GOOGLE_SIGN_IN_SUCCESS', 'GOOGLE_SIGN_IN_FAILURE', 'FB_SIGN_IN', 'FB_SIGN_IN_SUCCESS', 'FB_SIGN_IN_FAILURE', 'SIGN_OUT', 'CHANGE_PASSWORD', 'GET_USE', 'EDIT_USER', 'UPDATE_USER_SUCCESS', 'UPDATE_USER_FAILURE', 'SET_AUTH', 'SHOW_AUTH_DRAWER', 'GET_ACCOUNT_INFO', 'GET_ACCOUNT_INFO_SUCCESS', 'GET_ACCOUNT_INFO_FAILURE', 'UPDATE_ACCOUNT_INFO', 'UPDATE_ACCOUNT_INFO_SUCCESS', 'UPDATE_ACCOUNT_INFO_FAILURE')); // const CRUDActions = makeCRUDActionsCreator(MODEL, IGNORE_ACTIONS);\n// TODO: Custom actions\n\n/** Facebook Sign In */\n\nconst fbSignIn = (accessToken, info) => makeActionCreator(Types.FB_SIGN_IN, {\n  accessToken,\n  info\n});\n\nconst fbSignInSuccess = token => makeActionCreator(Types.FB_SIGN_IN_SUCCESS, {\n  token\n});\n\nconst fbSignInFailure = error => makeActionCreator(Types.FB_SIGN_IN_FAILURE, {\n  error\n});\n/** Google Sign In */\n\n\nconst googleSignIn = accessToken => makeActionCreator(Types.GOOGLE_SIGN_IN, {\n  accessToken\n});\n\nconst googleSignInSuccess = token => makeActionCreator(Types.GOOGLE_SIGN_IN_SUCCESS, {\n  token\n});\n\nconst googleSignInFailure = error => makeActionCreator(Types.GOOGLE_SIGN_IN_FAILURE, {\n  error\n});\n/** Email Sign In */\n\n\nconst signIn = ({\n  email,\n  password\n}) => makeActionCreator(Types.SIGN_IN, {\n  email,\n  password\n});\n\nconst signInSuccess = token => makeActionCreator(Types.SIGN_IN_SUCCESS, {\n  token\n});\n\nconst signInFailure = error => makeActionCreator(Types.SIGN_IN_FAILURE, {\n  error\n});\n/** Email Sign Up */\n\n\nconst signUp = ({\n  email,\n  password,\n  firstName,\n  lastName\n}) => makeActionCreator(Types.SIGN_UP, {\n  email,\n  password,\n  firstName,\n  lastName\n});\n\nconst signUpSuccess = token => makeActionCreator(Types.SIGN_UP_SUCCESS, {\n  token\n});\n\nconst signUpFailure = error => makeActionCreator(Types.SIGN_UP_FAILURE, {\n  error\n});\n\nconst signOut = () => makeActionCreator(Types.SIGN_OUT);\n/**\n * Set Authentication Status\n * @param {*} status\n */\n\n\nconst setAuth = status => makeActionCreator(Types.SET_AUTH, {\n  status\n});\n/**\n * Show authentication drawer\n * @param {*} status\n */\n\n\nconst showAuthDrawer = status => makeActionCreator(Types.SHOW_AUTH_DRAWER, {\n  status\n});\n/**\n * Get account info\n * @param {*} status\n */\n\n\nconst getAccountInfo = () => makeActionCreator(Types.GET_ACCOUNT_INFO);\n\nconst getAccountInfoSuccess = data => makeActionCreator(Types.GET_ACCOUNT_INFO_SUCCESS, _objectSpread({}, data));\n\nconst getAccountInfoFailure = error => makeActionCreator(Types.GET_ACCOUNT_INFO_SUCCESS, _objectSpread({}, error)); // TODO: Auto generated actions will be like this\n\n\nexport default {\n  fbSignIn,\n  fbSignInSuccess,\n  fbSignInFailure,\n  googleSignIn,\n  googleSignInSuccess,\n  googleSignInFailure,\n  signIn,\n  signInSuccess,\n  signInFailure,\n  signUp,\n  signUpSuccess,\n  signUpFailure,\n  setAuth,\n  showAuthDrawer,\n  signOut,\n  getAccountInfo,\n  getAccountInfoSuccess,\n  getAccountInfoFailure\n};","map":{"version":3,"sources":["/Users/apple/Work/myproject/base/base-nextjs/redux/Auth/actions.js"],"names":["makeConstantCreator","makeActionCreator","IGNORE_ACTIONS","Types","fbSignIn","accessToken","info","FB_SIGN_IN","fbSignInSuccess","token","FB_SIGN_IN_SUCCESS","fbSignInFailure","error","FB_SIGN_IN_FAILURE","googleSignIn","GOOGLE_SIGN_IN","googleSignInSuccess","GOOGLE_SIGN_IN_SUCCESS","googleSignInFailure","GOOGLE_SIGN_IN_FAILURE","signIn","email","password","SIGN_IN","signInSuccess","SIGN_IN_SUCCESS","signInFailure","SIGN_IN_FAILURE","signUp","firstName","lastName","SIGN_UP","signUpSuccess","SIGN_UP_SUCCESS","signUpFailure","SIGN_UP_FAILURE","signOut","SIGN_OUT","setAuth","status","SET_AUTH","showAuthDrawer","SHOW_AUTH_DRAWER","getAccountInfo","GET_ACCOUNT_INFO","getAccountInfoSuccess","data","GET_ACCOUNT_INFO_SUCCESS","getAccountInfoFailure"],"mappings":"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","sourcesContent":["import { makeConstantCreator, makeActionCreator } from '../../utils/redux';\n\n// TODO: Model name\n// export const MODEL = 'todos';\n\n// TODO: Add actions you don't want to use here\nexport const IGNORE_ACTIONS = [];\n\n// TODO: Create constant types for model\nexport const Types = {\n  // ...makeCRUDConstantCreator(MODEL, IGNORE_ACTIONS),\n  ...makeConstantCreator(\n    'SIGN_IN',\n    'SIGN_IN_SUCCESS',\n    'SIGN_IN_FAILURE',\n\n    'SIGN_UP',\n    'SIGN_UP_SUCCESS',\n    'SIGN_UP_FAILURE',\n\n    'GOOGLE_SIGN_IN',\n    'GOOGLE_SIGN_IN_SUCCESS',\n    'GOOGLE_SIGN_IN_FAILURE',\n\n    'FB_SIGN_IN',\n    'FB_SIGN_IN_SUCCESS',\n    'FB_SIGN_IN_FAILURE',\n\n    'SIGN_OUT',\n    'CHANGE_PASSWORD',\n    'GET_USE',\n    'EDIT_USER',\n    'UPDATE_USER_SUCCESS',\n    'UPDATE_USER_FAILURE',\n\n    'SET_AUTH',\n\n    'SHOW_AUTH_DRAWER',\n\n    'GET_ACCOUNT_INFO',\n    'GET_ACCOUNT_INFO_SUCCESS',\n    'GET_ACCOUNT_INFO_FAILURE',\n\n    'UPDATE_ACCOUNT_INFO',\n    'UPDATE_ACCOUNT_INFO_SUCCESS',\n    'UPDATE_ACCOUNT_INFO_FAILURE'\n  ),\n};\n\n// const CRUDActions = makeCRUDActionsCreator(MODEL, IGNORE_ACTIONS);\n\n// TODO: Custom actions\n/** Facebook Sign In */\n\nconst fbSignIn = (accessToken, info) =>\n  makeActionCreator(Types.FB_SIGN_IN, { accessToken, info });\nconst fbSignInSuccess = token =>\n  makeActionCreator(Types.FB_SIGN_IN_SUCCESS, { token });\nconst fbSignInFailure = error =>\n  makeActionCreator(Types.FB_SIGN_IN_FAILURE, { error });\n\n/** Google Sign In */\nconst googleSignIn = accessToken =>\n  makeActionCreator(Types.GOOGLE_SIGN_IN, { accessToken });\nconst googleSignInSuccess = token =>\n  makeActionCreator(Types.GOOGLE_SIGN_IN_SUCCESS, { token });\nconst googleSignInFailure = error =>\n  makeActionCreator(Types.GOOGLE_SIGN_IN_FAILURE, { error });\n\n/** Email Sign In */\nconst signIn = ({ email, password }) =>\n  makeActionCreator(Types.SIGN_IN, {\n    email,\n    password,\n  });\nconst signInSuccess = token =>\n  makeActionCreator(Types.SIGN_IN_SUCCESS, { token });\nconst signInFailure = error =>\n  makeActionCreator(Types.SIGN_IN_FAILURE, { error });\n\n/** Email Sign Up */\nconst signUp = ({ email, password, firstName, lastName }) =>\n  makeActionCreator(Types.SIGN_UP, {\n    email,\n    password,\n    firstName,\n    lastName,\n  });\nconst signUpSuccess = token =>\n  makeActionCreator(Types.SIGN_UP_SUCCESS, { token });\nconst signUpFailure = error =>\n  makeActionCreator(Types.SIGN_UP_FAILURE, { error });\n\nconst signOut = () => makeActionCreator(Types.SIGN_OUT);\n\n/**\n * Set Authentication Status\n * @param {*} status\n */\nconst setAuth = status => makeActionCreator(Types.SET_AUTH, { status });\n\n/**\n * Show authentication drawer\n * @param {*} status\n */\nconst showAuthDrawer = status =>\n  makeActionCreator(Types.SHOW_AUTH_DRAWER, { status });\n\n/**\n * Get account info\n * @param {*} status\n */\nconst getAccountInfo = () => makeActionCreator(Types.GET_ACCOUNT_INFO);\n\nconst getAccountInfoSuccess = data =>\n  makeActionCreator(Types.GET_ACCOUNT_INFO_SUCCESS, { ...data });\n\nconst getAccountInfoFailure = error =>\n  makeActionCreator(Types.GET_ACCOUNT_INFO_SUCCESS, { ...error });\n\n// TODO: Auto generated actions will be like this\nexport default {\n  fbSignIn,\n  fbSignInSuccess,\n  fbSignInFailure,\n\n  googleSignIn,\n  googleSignInSuccess,\n  googleSignInFailure,\n\n  signIn,\n  signInSuccess,\n  signInFailure,\n\n  signUp,\n  signUpSuccess,\n  signUpFailure,\n\n  setAuth,\n  showAuthDrawer,\n\n  signOut,\n\n  getAccountInfo,\n  getAccountInfoSuccess,\n  getAccountInfoFailure,\n};\n"]},"metadata":{},"sourceType":"module"}