{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport App, { Container } from 'next/app';\nimport React from 'react';\nimport { Provider } from 'react-redux';\nimport withRedux from 'next-redux-wrapper';\nimport withReduxSaga from 'next-redux-saga';\nimport { ThemeProvider } from 'styled-components';\nimport AuthActions from '../redux/Auth/actions';\nimport configureStore from '../redux/store';\nimport { isAuthenticated } from '../utils/cookies';\nimport theme from '../config/theme';\n\nvar MyApp =\n/*#__PURE__*/\nfunction (_App) {\n  _inherits(MyApp, _App);\n\n  function MyApp() {\n    _classCallCheck(this, MyApp);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(MyApp).apply(this, arguments));\n  }\n\n  _createClass(MyApp, [{\n    key: \"render\",\n    // static async getInitialProps({ Component, ctx }) {\n    //   let pageProps = {};\n    //   if (Component.getInitialProps) {\n    //     pageProps = await Component.getInitialProps({ ctx });\n    //   }\n    //   // TODO: Sharing isAuthenticated state all of application\n    //   const isAuth = isAuthenticated(ctx);\n    //   ctx.store.dispatch(AuthActions.setAuth(isAuth));\n    //   return { pageProps };\n    // }\n    value: function render() {\n      var _this$props = this.props,\n          Component = _this$props.Component,\n          pageProps = _this$props.pageProps,\n          store = _this$props.store;\n      return React.createElement(Container, null, React.createElement(ThemeProvider, {\n        theme: theme\n      }, React.createElement(Provider, {\n        store: store\n      }, React.createElement(Component, pageProps))));\n    }\n  }]);\n\n  return MyApp;\n}(App);\n\nexport default withRedux(configureStore)(withReduxSaga(MyApp));","map":null,"metadata":{},"sourceType":"module"}