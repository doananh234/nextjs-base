{"ast":null,"code":"import cookie from 'js-cookie';\nexport var setCookie = function setCookie(key, value) {\n  if (process.browser) {\n    cookie.set(key, value, {\n      expires: 1,\n      path: '/'\n    });\n  }\n};\nexport var removeCookie = function removeCookie(key) {\n  if (process.browser) {\n    cookie.remove(key, {\n      expires: 1\n    });\n  }\n};\n\nvar getCookieFromBrowser = function getCookieFromBrowser(key) {\n  return cookie.get(key);\n};\n\nvar getCookieFromServer = function getCookieFromServer(key, req) {\n  if (!req.headers.cookie) {\n    return undefined;\n  }\n\n  var rawCookie = req.headers.cookie.split(';').find(function (c) {\n    return c.trim().startsWith(\"\".concat(key, \"=\"));\n  });\n\n  if (!rawCookie) {\n    return undefined;\n  }\n\n  return rawCookie.split('=')[1];\n};\n\nexport var getCookie = function getCookie(key, req) {\n  return process.browser ? getCookieFromBrowser(key) : getCookieFromServer(key, req);\n}; // TODO: Token\n\nexport var getToken = function getToken() {\n  var ctx = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return getCookie('token', ctx.req);\n};\nexport var setToken = function setToken(value) {\n  return setCookie('token', value);\n};\nexport var removeToken = function removeToken() {\n  return removeCookie('token');\n};\n/**\n * Get authenticated status\n * @param {*} ctx optional\n */\n\nexport var isAuthenticated = function isAuthenticated(ctx) {\n  return !!getToken(ctx);\n};","map":{"version":3,"sources":["/Users/apple/Work/myproject/base/base-nextjs/utils/cookies.js"],"names":["cookie","setCookie","key","value","process","browser","set","expires","path","removeCookie","remove","getCookieFromBrowser","get","getCookieFromServer","req","headers","undefined","rawCookie","split","find","c","trim","startsWith","getCookie","getToken","ctx","setToken","removeToken","isAuthenticated"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,WAAnB;AAEA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,GAAD,EAAMC,KAAN,EAAgB;AACvC,MAAIC,OAAO,CAACC,OAAZ,EAAqB;AACnBL,IAAAA,MAAM,CAACM,GAAP,CAAWJ,GAAX,EAAgBC,KAAhB,EAAuB;AACrBI,MAAAA,OAAO,EAAE,CADY;AAErBC,MAAAA,IAAI,EAAE;AAFe,KAAvB;AAID;AACF,CAPM;AASP,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAAAP,GAAG,EAAI;AACjC,MAAIE,OAAO,CAACC,OAAZ,EAAqB;AACnBL,IAAAA,MAAM,CAACU,MAAP,CAAcR,GAAd,EAAmB;AACjBK,MAAAA,OAAO,EAAE;AADQ,KAAnB;AAGD;AACF,CANM;;AAQP,IAAMI,oBAAoB,GAAG,SAAvBA,oBAAuB,CAAAT,GAAG;AAAA,SAAIF,MAAM,CAACY,GAAP,CAAWV,GAAX,CAAJ;AAAA,CAAhC;;AAEA,IAAMW,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACX,GAAD,EAAMY,GAAN,EAAc;AACxC,MAAI,CAACA,GAAG,CAACC,OAAJ,CAAYf,MAAjB,EAAyB;AACvB,WAAOgB,SAAP;AACD;;AACD,MAAMC,SAAS,GAAGH,GAAG,CAACC,OAAJ,CAAYf,MAAZ,CACfkB,KADe,CACT,GADS,EAEfC,IAFe,CAEV,UAAAC,CAAC;AAAA,WAAIA,CAAC,CAACC,IAAF,GAASC,UAAT,WAAuBpB,GAAvB,OAAJ;AAAA,GAFS,CAAlB;;AAGA,MAAI,CAACe,SAAL,EAAgB;AACd,WAAOD,SAAP;AACD;;AACD,SAAOC,SAAS,CAACC,KAAV,CAAgB,GAAhB,EAAqB,CAArB,CAAP;AACD,CAXD;;AAaA,OAAO,IAAMK,SAAS,GAAG,SAAZA,SAAY,CAACrB,GAAD,EAAMY,GAAN;AAAA,SACvBV,OAAO,CAACC,OAAR,GAAkBM,oBAAoB,CAACT,GAAD,CAAtC,GAA8CW,mBAAmB,CAACX,GAAD,EAAMY,GAAN,CAD1C;AAAA,CAAlB,C,CAGP;;AACA,OAAO,IAAMU,QAAQ,GAAG,SAAXA,QAAW;AAAA,MAACC,GAAD,uEAAO,EAAP;AAAA,SAAcF,SAAS,CAAC,OAAD,EAAUE,GAAG,CAACX,GAAd,CAAvB;AAAA,CAAjB;AACP,OAAO,IAAMY,QAAQ,GAAG,SAAXA,QAAW,CAAAvB,KAAK;AAAA,SAAIF,SAAS,CAAC,OAAD,EAAUE,KAAV,CAAb;AAAA,CAAtB;AACP,OAAO,IAAMwB,WAAW,GAAG,SAAdA,WAAc;AAAA,SAAMlB,YAAY,CAAC,OAAD,CAAlB;AAAA,CAApB;AACP;;;;;AAIA,OAAO,IAAMmB,eAAe,GAAG,SAAlBA,eAAkB,CAAAH,GAAG;AAAA,SAAI,CAAC,CAACD,QAAQ,CAACC,GAAD,CAAd;AAAA,CAA3B","sourcesContent":["import cookie from 'js-cookie';\n\nexport const setCookie = (key, value) => {\n  if (process.browser) {\n    cookie.set(key, value, {\n      expires: 1,\n      path: '/',\n    });\n  }\n};\n\nexport const removeCookie = key => {\n  if (process.browser) {\n    cookie.remove(key, {\n      expires: 1,\n    });\n  }\n};\n\nconst getCookieFromBrowser = key => cookie.get(key);\n\nconst getCookieFromServer = (key, req) => {\n  if (!req.headers.cookie) {\n    return undefined;\n  }\n  const rawCookie = req.headers.cookie\n    .split(';')\n    .find(c => c.trim().startsWith(`${key}=`));\n  if (!rawCookie) {\n    return undefined;\n  }\n  return rawCookie.split('=')[1];\n};\n\nexport const getCookie = (key, req) =>\n  process.browser ? getCookieFromBrowser(key) : getCookieFromServer(key, req);\n\n// TODO: Token\nexport const getToken = (ctx = {}) => getCookie('token', ctx.req);\nexport const setToken = value => setCookie('token', value);\nexport const removeToken = () => removeCookie('token');\n/**\n * Get authenticated status\n * @param {*} ctx optional\n */\nexport const isAuthenticated = ctx => !!getToken(ctx);\n"]},"metadata":{},"sourceType":"module"}