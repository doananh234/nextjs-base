{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport { makeConstantCreator, makeActionCreator } from '../../utils/redux'; // TODO: Model name\n// export const MODEL = 'todos';\n// TODO: Add actions you don't want to use here\n\nexport const IGNORE_ACTIONS = []; // TODO: Create constant types for model\n\nexport const Types = _objectSpread({}, makeConstantCreator('SIGN_IN', 'SIGN_IN_SUCCESS', 'SIGN_IN_FAILURE', 'SIGN_UP', 'SIGN_UP_SUCCESS', 'SIGN_UP_FAILURE', 'GOOGLE_SIGN_IN', 'GOOGLE_SIGN_IN_SUCCESS', 'GOOGLE_SIGN_IN_FAILURE', 'FB_SIGN_IN', 'FB_SIGN_IN_SUCCESS', 'FB_SIGN_IN_FAILURE', 'SIGN_OUT', 'CHANGE_PASSWORD', 'GET_USE', 'EDIT_USER', 'UPDATE_USER_SUCCESS', 'UPDATE_USER_FAILURE', 'SET_AUTH', 'SHOW_AUTH_DRAWER', 'GET_ACCOUNT_INFO', 'GET_ACCOUNT_INFO_SUCCESS', 'GET_ACCOUNT_INFO_FAILURE', 'UPDATE_ACCOUNT_INFO', 'UPDATE_ACCOUNT_INFO_SUCCESS', 'UPDATE_ACCOUNT_INFO_FAILURE')); // const CRUDActions = makeCRUDActionsCreator(MODEL, IGNORE_ACTIONS);\n// TODO: Custom actions\n\n/** Facebook Sign In */\n\nconst fbSignIn = (accessToken, info) => makeActionCreator(Types.FB_SIGN_IN, {\n  accessToken,\n  info\n});\n\nconst fbSignInSuccess = token => makeActionCreator(Types.FB_SIGN_IN_SUCCESS, {\n  token\n});\n\nconst fbSignInFailure = error => makeActionCreator(Types.FB_SIGN_IN_FAILURE, {\n  error\n});\n/** Google Sign In */\n\n\nconst googleSignIn = accessToken => makeActionCreator(Types.GOOGLE_SIGN_IN, {\n  accessToken\n});\n\nconst googleSignInSuccess = token => makeActionCreator(Types.GOOGLE_SIGN_IN_SUCCESS, {\n  token\n});\n\nconst googleSignInFailure = error => makeActionCreator(Types.GOOGLE_SIGN_IN_FAILURE, {\n  error\n});\n/** Email Sign In */\n\n\nconst signIn = ({\n  email,\n  password\n}) => makeActionCreator(Types.SIGN_IN, {\n  email,\n  password\n});\n\nconst signInSuccess = token => makeActionCreator(Types.SIGN_IN_SUCCESS, {\n  token\n});\n\nconst signInFailure = error => makeActionCreator(Types.SIGN_IN_FAILURE, {\n  error\n});\n/** Email Sign Up */\n\n\nconst signUp = ({\n  email,\n  password,\n  firstName,\n  lastName\n}) => makeActionCreator(Types.SIGN_UP, {\n  email,\n  password,\n  firstName,\n  lastName\n});\n\nconst signUpSuccess = token => makeActionCreator(Types.SIGN_UP_SUCCESS, {\n  token\n});\n\nconst signUpFailure = error => makeActionCreator(Types.SIGN_UP_FAILURE, {\n  error\n});\n\nconst signOut = () => makeActionCreator(Types.SIGN_OUT);\n/**\n * Set Authentication Status\n * @param {*} status\n */\n\n\nconst setAuth = status => makeActionCreator(Types.SET_AUTH, {\n  status\n});\n/**\n * Show authentication drawer\n * @param {*} status\n */\n\n\nconst showAuthDrawer = status => makeActionCreator(Types.SHOW_AUTH_DRAWER, {\n  status\n});\n/**\n * Get account info\n * @param {*} status\n */\n\n\nconst getAccountInfo = () => makeActionCreator(Types.GET_ACCOUNT_INFO);\n\nconst getAccountInfoSuccess = data => makeActionCreator(Types.GET_ACCOUNT_INFO_SUCCESS, _objectSpread({}, data));\n\nconst getAccountInfoFailure = error => makeActionCreator(Types.GET_ACCOUNT_INFO_SUCCESS, _objectSpread({}, error)); // TODO: Auto generated actions will be like this\n\n\nexport default {\n  fbSignIn,\n  fbSignInSuccess,\n  fbSignInFailure,\n  googleSignIn,\n  googleSignInSuccess,\n  googleSignInFailure,\n  signIn,\n  signInSuccess,\n  signInFailure,\n  signUp,\n  signUpSuccess,\n  signUpFailure,\n  setAuth,\n  showAuthDrawer,\n  signOut,\n  getAccountInfo,\n  getAccountInfoSuccess,\n  getAccountInfoFailure\n};","map":null,"metadata":{},"sourceType":"module"}